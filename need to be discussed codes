import sys
import random

print("<<< welcome to SOS >>>")

info = input ("Press 0 for guides and press 1 to continue: ")

while not (info == "0" or info == "1"):
    print ("### invalid input ###")
    info = input ("Press 0 to learn how to play else press 1 to continue: ")

if info == "0":
    print (" ")
    print ("<<< guide >>>")
    print ("The goal is to form the word SOS on the grid horizontally/vertically/diagonally.")
    print ("There are two modes.")
    print ("The Ai mode and the 2 player mode.")
    print ("The AI mode only requires one player and 2 player mode requires 2 players.")
    print ("Each player will take turns to fill the grid with either S or O.")
    print ("The player that forms the word SOS first will win the game.")
    print ("<<< GOOD LUCK >>>")
    
elif info == "1":
    info = None

print (" ")
mode = input ("Press 1 for AI mode and press 2 for 2 player mode: ") 
print ("<<< players >>>")
play1 = input ("Enter player 1 name: ")
if mode == '2':
    play2 = input ("Enter player 2 name: ")

# we can try to do the mode ltr on but like i just wanna put it here

grid = ["A","B","C","D","E"]

board = [[" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "]]

A = board[0] 
B = board[1] 
C = board[2]
D = board[3]
E = board[4]


sep = "|" 
hline = "\t+---+---+---+---+---+" 

def ttt():
    count = 0
    print("          1   2   3   4   5")
    for row in board:
        print (hline)
        print ("     " + grid[count] + "  " + sep + " " + row[0] + " " + sep + " " + row[1] + " " + sep + " " + row[2] + " " + sep + " " + row[3] + " " + sep + " " + row[4] + " " + sep)
        count += 1
    print (hline)

while not(mode == "1" or mode == "2"):
    print ("### invalid input ###")
    mode = input ("Press 1 for AI mode and press 2 for 2 player mode: ")

def spot_check():
    inpt = input("What would you like to put in (S or O): ")
    inpt = inpt.upper()
    while not (inpt == "S" or inpt == "O"):
        print ("### invalid input ###")
        inpt = input("What would you like to put in (S or O): ")
        inpt = inpt.upper()

    locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
    locat = locat.upper()
    while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
        print ("### invalid input ###")
        locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
        locat = locat.upper()
    
    x = None
    for i in range(5):
        x = int(locat[1])
        if locat[0] == "A":
            if x == (1*i)+1:
                if A[i] == " ":
                    A[i] = inpt
                else:
                    print("### spot is already filled ###")
                    inpt = input("What would you like to put in (S or O): ")
                    inpt = inpt.upper()
                    while not (inpt == "S" or inpt == "O"):
                        print ("### invalid input ###")
                        inpt = input("What would you like to put in (S or O): ")
                        inpt = inpt.upper()

                    locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                    locat = locat.upper()
                    while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
                        print ("### invalid input ###")
                        locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                        locat = locat.upper()
                    continue
        elif locat[0] == "B":
            if x == (1*i)+1:
                if B[i] == " ":
                    B[i] = inpt
                else:
                    print("### spot is already filled ###")
                    inpt = input("What would you like to put in (S or O): ")
                    inpt = inpt.upper()
                    while not (inpt == "S" or inpt == "O"):
                        print ("### invalid input ###")
                        inpt = input("What would you like to put in (S or O): ")
                        inpt = inpt.upper()

                    locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                    locat = locat.upper()
                    while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
                        print ("### invalid input ###")
                        locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                        locat = locat.upper()
                    continue
        elif locat[0] == "C":
            if x == (1*i)+1:
                if C[i] == " ":
                    C[i] = inpt
                else:
                    print("### spot is already filled ###")
                    inpt = input("What would you like to put in (S or O): ")
                    inpt = inpt.upper()
                    while not (inpt == "S" or inpt == "O"):
                        print ("### invalid input ###")
                        inpt = input("What would you like to put in (S or O): ")
                        inpt = inpt.upper()

                    locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                    locat = locat.upper()
                    while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
                        print ("### invalid input ###")
                        locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                        locat = locat.upper()
                    continue
        elif locat[0] == "D":
            if x == (1*i)+1:
                if D[i] == " ":
                    D[i] = inpt
                else:
                    print("### spot is already filled ###")
                    inpt = input("What would you like to put in (S or O): ")
                    inpt = inpt.upper()
                    while not (inpt == "S" or inpt == "O"):
                        print ("### invalid input ###")
                        inpt = input("What would you like to put in (S or O): ")
                        inpt = inpt.upper()

                    locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                    locat = locat.upper()
                    while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
                        print ("### invalid input ###")
                        locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                        locat = locat.upper()
                    continue
        elif locat[0] == "E":
            if x == (1*i)+1:
                if E[i] == " ":
                    E[i] = inpt
                else:
                    print("### spot is already filled ###")
                    inpt = input("What would you like to put in (S or O): ")
                    inpt = inpt.upper()
                    while not (inpt == "S" or inpt == "O"):
                        print ("### invalid input ###")
                        inpt = input("What would you like to put in (S or O): ")
                        inpt = inpt.upper()

                    locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                    locat = locat.upper()
                    while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
                        print ("### invalid input ###")
                        locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                        locat = locat.upper()
                    continue



def ai():
    y = None
    plyer = 0
    while mode == "1":
        if plyer % 2 == 0:
            print ("<<< " + play1 + " >>>")
            plyer += 1
            inpt = input("What would you like to put in (S or O): ")
            inpt = inpt.upper()
            while not (inpt == "S" or inpt == "O"):
                print ("### invalid input ###")
                inpt = input("What would you like to put in (S or O): ")
                inpt = inpt.upper()

            locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
            locat = locat.upper()
            while (not (locat[0] == "A" or locat[0] == "B" or locat[0] == "C" or locat[0] == "D" or locat[0] == "E")) or (not (locat[1] == "1" or locat[1] == "2" or locat[1] == "3" or locat[1] == "4" or locat[1] == "5")):
                print ("### invalid input ###")
                locat = input("Where would you like to place your S/O (eg: A1, B2, C3, D4, E5): ")
                locat = locat.upper()
            ttt()
        else:
            print ("<<< AI\'s turn >>>")
            plyer += 1
            for i in range(3):
                #hori
                if A[i] == "S" and A[i+2] == "S" and A[i+1] == " ":
                    A[i+1] = "O"
                    break
                elif B[i] == "S" and B[i+2] == "S" and B[i+1] == " ":
                    B[i+1] = "O"
                    break
                elif C[i] == "S" and C[i+2] == "S" and C[i+1] == " ":
                    C[i+1] = "O"
                    break
                elif D[i] == "S" and D[i+2] == "S" and D[i+1] == " ":
                    D[i+1] = "O"
                    break
                elif E[i] == "S" and E[i+2] == "S" and E[i+1] == " ":
                    E[i+1] = "O"
                    break

                elif A[i+1] == "O" and A[i+2] == "S" and A[i] == " ":
                    A[i] = "S"
                elif B[i+1] == "O" and B[i+2] == "S" and B[i] == " ":
                    B[i] = "S"
                elif C[i+1] == "O" and C[i+2] == "S" and C[i] == " ":
                    C[i] = "S"
                elif D[i+1] == "O" and D[i+2] == "S" and D[i] == " ":
                    D[i] = "S"
                elif E[i+1] == "O" and E[i+2] == "S" and E[i] == " ":
                    E[i] = "S"

                elif A[i+1] == "O" and A[i] == "S" and A[i+2] == " ":
                    A[i+2] = "S"
                elif B[i+1] == "O" and B[i] == "S" and B[i+2] == " ":
                    B[i+2] = "S"
                elif C[i+1] == "O" and C[i] == "S" and C[i+2] == " ":
                    C[i+2] = "S"
                elif D[i+1] == "O" and D[i] == "S" and D[i+2] == " ":
                    D[i+2] = "S"
                elif E[i+1] == "O" and E[i] == "S" and E[i+2] == " ":
                    E[i+2] = "S"

                #diag \
                elif A[i] == 'S' and C[i+2] == 'S' and B[i+1] == ' ':
                    B[i+1] = 'O'
                elif B[i] == 'S' and D[i+2] == 'S' and C[i+1] == ' ':
                    C[i+1] = 'O'
                elif C[i] == 'S' and E[i+2] == 'S' and D[i+1] == ' ':
                    D[i+1] = 'O'

                elif B[i+1] == 'O' and C[i+2] == 'S' and A[i] == ' ':
                    A[i] = 'S'
                elif C[i+1] == 'O' and D[i+2] == 'S' and B[i] == ' ':
                    B[i] = 'S'
                elif C[i+1] == 'O' and C[i+2] == 'S' and C[i] == ' ':
                    C[i] = 'S'

                elif A[i] == 'S' and B[i+1] == 'O' and C[i+2] == ' ':
                    C[i+2] = 'S'
                elif B[i] == 'S' and C[i+1] == 'O' and D[i+2] == ' ':
                    D[i+2] = 'S'
                elif E[i] == 'S' and D[i+1] == 'O' and C[i+2] == ' ':
                    C[i+2] = 'S'

                #diag /
                elif A[4-i] == 'S' and C[2-i] == 'S' and B[3-i] == ' ':
                    B[4-i] = 'O'
                elif B[4-i] == 'S' and D[2-i] == 'S' and C[3-i] == ' ':
                    C[3-i] = 'O'
                elif C[4-i] == 'S' and E[2-i] == 'S' and D[3-i] == ' ':
                    D[3-i] = 'O'

                elif B[3-i] == 'O' and C[2-i] == 'S' and A[4-i] == ' ':
                    A[4-i] = 'S'
                elif C[3-i] == 'O' and D[2-i] == 'S' and B[4-i] == ' ':
                    B[4-i] = 'S'
                elif D[3-i] == 'O' and E[2-i] == 'S' and C[4-i] == ' ':
                    C[4-i] = 'S'

                elif A[4-i] == 'S' and B[3-i] == 'O' and C[2-i] == ' ':
                    C[2-i] = 'S'
                elif B[4-i] == 'S' and C[3-i] == 'O' and D[2-i] == ' ':
                    D[2-i] = 'S'
                elif C[4-i] == 'S' and D[3-i] == 'O' and E[2-i] == ' ':
                    E[2-i] = 'S'

                else:
                    for i in range(5):
                        #vert
                        if A[i] == 'S' and C[i] == 'S' and B[i] == ' ':
                            B[i] = 'O'
                        elif B[i] == 'S' and D[i] == 'S' and C[i] == ' ':
                            C[i] = 'O'
                        elif C[i] == 'S' and E[i] == 'S' and D[i] == ' ':
                            D[i] == 'O'

                        elif B[i] == 'O' and C[i] == 'S' and A[i] == ' ':
                            A[i] = 'S'
                        elif C[i] == 'O' and D[i] == 'S' and B[i] == ' ':
                            B[i] = 'S'
                        elif D[i] == 'O' and E[i] == 'S' and C[i] == ' ':
                            C[i] = 'S'

                        elif A[i] == 'S' and B[i] == 'O' and C[i] == ' ':
                            C[i] = 'S'
                        elif B[i] == 'S' and C[i] == 'O' and D[i] == ' ':
                            D[i] = 'S'
                        elif C[i] == 'S' and D[i] == 'O' and E[i] == ' ':
                            E[i] == 'S'

                        else: 
                            y = None

                        randalpha = random.choice(grid)
                        randnum = random.randint(0,4)
                        so = ['S','O']
                        plyernum = plyer
                        while y == None:
                            if plyernum % 2 != 0:
                                if randalpha == "A":
                                    if A[randnum] == " ":
                                        A[randnum] = random.choice(so)
                                    else:
                                        continue
                                elif randalpha == "B":
                                    if B[randnum] == " ":
                                        B[randnum] = random.choice(so)
                                    else:
                                        continue
                                elif randalpha == "C":
                                    if C[randnum] == " ":
                                        C[randnum] = random.choice(so)
                                    else:
                                        continue
                                elif randalpha == "D":
                                    if D[randnum] == " ":
                                        D[randnum] = random.choice(so)
                                    else:
                                        continue
                                elif randalpha == "E":
                                    if E[randnum] == " ":
                                        E[randnum] = random.choice(so)
                                    else:
                                        continue
        
            ttt()
            
counter = False

def counter_check():
    for i in range(len(grid)):
        if A[i] == " ":
            counter = False
        elif B[i] == " ":
            counter = False
        elif C[i] == " ":
            counter = False
        elif D[i] == " ":
            counter = False
        elif E[i] == " ":
            counter = False
        else:
            counter = True

counter_check()

def playermode ():
    plyer = 0 
    while counter == False:
        if mode == "2": 
            if plyer % 2 == 0:
                print ("<<< " + play1 + " >>>")
                plyer += 1
            else:
                print ("<<< " + play2 + " >>>")
                plyer += 1
        
        spot_check()
        counter_check()
        print (" ")            
        ttt()
    
        if A[0] == "S" and A[1] == "O" and A[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif A[1] == "S" and A[2] == "O" and A[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif A[2] == "S" and A[2] == "O" and A[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif B[0] == "S" and B[1] == "O" and B[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[1] == "S" and B[2] == "O" and B[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[2] == "S" and B[3] == "O" and B[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif C[0] == "S" and C[1] == "O" and C[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[1] == "S" and C[2] == "O" and C[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[2] == "S" and C[3] == "O" and C[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif D[0] == "S" and D[1] == "O" and D[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif D[1] == "S" and D[2] == "O" and D[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif D[2] == "S" and D[3] == "O" and D[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif E[0] == "S" and E[1] == "O" and E[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif E[1] == "S" and E[2] == "O" and E[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif E[2] == "S" and E[3] == "O" and E[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[1] == "S" and B[1] == "O" and C[1] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[1] == "S" and C[1] == "O" and D[1] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[1] == "S" and D[1] == "O" and E[1] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[0] == "S" and B[0] == "O" and C[0] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[0] == "S" and C[0] == "O" and D[0] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[0] == "S" and D[0] == "O" and E[0] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[2] == "S" and B[2] == "O" and C[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[2] == "S" and C[2] == "O" and D[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[2] == "S" and D[2] == "O" and E[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[3] == "S" and B[3] == "O" and C[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[3] == "S" and C[3] == "O" and D[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[3] == "S" and D[3] == "O" and E[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[4] == "S" and B[4] == "O" and C[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[4] == "S" and C[4] == "O" and D[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[4] == "S" and D[4] == "O" and E[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[0] == "S" and B[1] == "O" and C[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif A[1] == "S" and B[2] == "O" and C[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif A[2] == "S" and B[3] == "O" and C[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif B[0] == "S" and C[1] == "O" and D[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[1] == "S" and C[2] == "O" and D[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[2] == "S" and C[3] == "O" and D[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif C[1] == "S" and D[2] == "O" and E[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[1] == "S" and D[2] == "O" and E[3] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[2] == "S" and D[3] == "O" and E[4] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif A[4] == "S" and B[3] == "O" and C[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif A[3] == "S" and B[2] == "O" and C[1] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif A[2] == "S" and B[1] == "O" and C[0] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif B[4] == "S" and C[3] == "O" and D[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[3] == "S" and C[2] == "O" and D[1] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif B[2] == "S" and C[1] == "O" and D[0] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

        elif C[4] == "S" and D[3] == "O" and E[2] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[3] == "S" and D[2] == "O" and E[1] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()
        elif C[2] == "S" and D[1] == "O" and E[0] == "S":
            print ("^^^ game end ^^^ \n [[[ winner is the last player ]]]")
            sys.exit()

    print ("^^^ game end ^^^ \n [[[ no winner ]]]")
    sys.exit()

if mode == "1":
    ttt()
    print ("AI mode activated")
    print (" ")
    ai()
elif mode == "2":
    ttt()
    print ("2 player mode activated")
    print (" ")
    playermode()
